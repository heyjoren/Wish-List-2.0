{"ast":null,"code":"import { getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nimport { Observable, from } from 'rxjs';\nimport { shareReplay, map } from 'rxjs/operators';\nfunction fromTask(task) {\n  return new Observable(function (subscriber) {\n    var lastSnapshot = null;\n    var complete = false;\n    var hasError = false;\n    var error = null;\n    var emit = function (snapshot) {\n      lastSnapshot = snapshot;\n      schedule();\n    };\n    var id = null;\n    /**\n     * Schedules an async event to check and emit\n     * the most recent snapshot, and complete or error\n     * if necessary.\n     */\n    var schedule = function () {\n      if (!id) {\n        id = setTimeout(function () {\n          id = null;\n          if (lastSnapshot) subscriber.next(lastSnapshot);\n          if (complete) subscriber.complete();\n          if (hasError) subscriber.error(error);\n        });\n      }\n    };\n    subscriber.add(function () {\n      // If we have any emissions checks scheduled, cancel them.\n      if (id) clearTimeout(id);\n    });\n    // Emit the initial snapshot\n    emit(task.snapshot);\n    // Take each update and schedule them to be emitted (see `emit`)\n    subscriber.add(task.on('state_changed', emit));\n    // task is a promise, so we can convert that to an observable,\n    // this is done for the ergonomics around making sure we don't\n    // try to push errors or completions through closed subscribers\n    subscriber.add(from(task).subscribe({\n      next: emit,\n      error: function (err) {\n        hasError = true;\n        error = err;\n        schedule();\n      },\n      complete: function () {\n        complete = true;\n        schedule();\n      }\n    }));\n  });\n}\nfunction getDownloadURL(ref) {\n  return from(getDownloadURL$1(ref));\n}\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMetadata(ref) {\n  return from(getMetadata$1(ref));\n}\n// MARK: Breaking change (renaming put to uploadBytesResumable)\nfunction uploadBytesResumable(ref, data, metadata) {\n  return new Observable(function (subscriber) {\n    var task = uploadBytesResumable$1(ref, data, metadata);\n    var subscription = fromTask(task).subscribe(subscriber);\n    return function unsubscribe() {\n      subscription.unsubscribe();\n      task.cancel();\n    };\n  }).pipe(shareReplay({\n    bufferSize: 1,\n    refCount: true\n  }));\n}\n// MARK: Breaking change (renaming put to uploadString)\nfunction uploadString(ref, data, format, metadata) {\n  return from(uploadString$1(ref, data, format, metadata));\n}\nfunction percentage(task) {\n  return fromTask(task).pipe(map(function (snapshot) {\n    return {\n      progress: snapshot.bytesTransferred / snapshot.totalBytes * 100,\n      snapshot: snapshot\n    };\n  }));\n}\nexport { fromTask, getDownloadURL, getMetadata, percentage, uploadBytesResumable, uploadString };","map":{"version":3,"names":["getDownloadURL","getDownloadURL$1","getMetadata","getMetadata$1","uploadBytesResumable","uploadBytesResumable$1","uploadString","uploadString$1","Observable","from","shareReplay","map","fromTask","task","subscriber","lastSnapshot","complete","hasError","error","emit","snapshot","schedule","id","setTimeout","next","add","clearTimeout","on","subscribe","err","ref","data","metadata","subscription","unsubscribe","cancel","pipe","bufferSize","refCount","format","percentage","progress","bytesTransferred","totalBytes"],"sources":["C:/Users/HEYVA/OneDrive - Thomas More/Documenten/School/School jaar 2024 - 2025/Web development/Labo/Eigen/Project/Wish-List-2.0/wishlist/node_modules/rxfire/storage/index.esm.js"],"sourcesContent":["import { getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nimport { Observable, from } from 'rxjs';\nimport { shareReplay, map } from 'rxjs/operators';\n\nfunction fromTask(task) {\n    return new Observable(function (subscriber) {\n        var lastSnapshot = null;\n        var complete = false;\n        var hasError = false;\n        var error = null;\n        var emit = function (snapshot) {\n            lastSnapshot = snapshot;\n            schedule();\n        };\n        var id = null;\n        /**\n         * Schedules an async event to check and emit\n         * the most recent snapshot, and complete or error\n         * if necessary.\n         */\n        var schedule = function () {\n            if (!id) {\n                id = setTimeout(function () {\n                    id = null;\n                    if (lastSnapshot)\n                        subscriber.next(lastSnapshot);\n                    if (complete)\n                        subscriber.complete();\n                    if (hasError)\n                        subscriber.error(error);\n                });\n            }\n        };\n        subscriber.add(function () {\n            // If we have any emissions checks scheduled, cancel them.\n            if (id)\n                clearTimeout(id);\n        });\n        // Emit the initial snapshot\n        emit(task.snapshot);\n        // Take each update and schedule them to be emitted (see `emit`)\n        subscriber.add(task.on('state_changed', emit));\n        // task is a promise, so we can convert that to an observable,\n        // this is done for the ergonomics around making sure we don't\n        // try to push errors or completions through closed subscribers\n        subscriber.add(from(task).subscribe({\n            next: emit,\n            error: function (err) {\n                hasError = true;\n                error = err;\n                schedule();\n            },\n            complete: function () {\n                complete = true;\n                schedule();\n            },\n        }));\n    });\n}\nfunction getDownloadURL(ref) {\n    return from(getDownloadURL$1(ref));\n}\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMetadata(ref) {\n    return from(getMetadata$1(ref));\n}\n// MARK: Breaking change (renaming put to uploadBytesResumable)\nfunction uploadBytesResumable(ref, data, metadata) {\n    return new Observable(function (subscriber) {\n        var task = uploadBytesResumable$1(ref, data, metadata);\n        var subscription = fromTask(task).subscribe(subscriber);\n        return function unsubscribe() {\n            subscription.unsubscribe();\n            task.cancel();\n        };\n    }).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n}\n// MARK: Breaking change (renaming put to uploadString)\nfunction uploadString(ref, data, format, metadata) {\n    return from(uploadString$1(ref, data, format, metadata));\n}\nfunction percentage(task) {\n    return fromTask(task).pipe(map(function (snapshot) { return ({\n        progress: (snapshot.bytesTransferred / snapshot.totalBytes) * 100,\n        snapshot: snapshot,\n    }); }));\n}\n\nexport { fromTask, getDownloadURL, getMetadata, percentage, uploadBytesResumable, uploadString };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}