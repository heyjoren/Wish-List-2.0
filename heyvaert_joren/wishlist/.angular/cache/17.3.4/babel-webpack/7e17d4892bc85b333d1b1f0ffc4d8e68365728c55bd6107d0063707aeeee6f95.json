{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/HEYVA/OneDrive - Thomas More/Documenten/School/School jaar 2024 - 2025/Web development/Labo/Eigen/Project/Wish-List-2.0/wishlist/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\n/*Backend service*/\nimport { Injectable } from '@angular/core';\nimport { Subject, from, map } from 'rxjs';\nimport { collection, collectionData, deleteDoc, doc, docData, Firestore, query, setDoc, updateDoc, where, writeBatch } from '@angular/fire/firestore';\nimport { getDownloadURL, ref, uploadBytesResumable, Storage, deleteObject } from '@angular/fire/storage';\nimport { AuthService } from '../auth/auth.service';\nimport { SortItemsByDatePipe } from '../sort-items-by-date.pipe';\nlet ItemService = class ItemService {\n  constructor(db, storage, auth, sortItemsByDatePipe) {\n    this.db = db;\n    this.storage = storage;\n    this.auth = auth;\n    this.sortItemsByDatePipe = sortItemsByDatePipe;\n    this.items = [];\n    this.ItemsUpdated = new Subject();\n  }\n  getItems() {\n    return collectionData(query(collection(this.db, 'item'), where(\"uid\", \"==\", this.auth.getUid())), {\n      idField: 'id'\n    });\n  }\n  getItemsnPut() {\n    this.getItems().subscribe({\n      next: respons => {\n        this.items = respons;\n        this.ItemsUpdated.next(this.items);\n      },\n      error: error => console.log('error: ', error)\n    });\n  }\n  getLastItems() {\n    return this.getItems().pipe(map(items => this.sortItemsByDatePipe.transform(items)), map(sortedItems => sortedItems.slice(0, 5)));\n  }\n  getItem(id) {\n    return docData(doc(this.db, 'item/' + id));\n  }\n  addItems(item, id) {\n    const itemRef = doc(this.db, 'item/', id);\n    return from(setDoc(itemRef, item));\n  }\n  deleteItem(item) {\n    const itemRef = doc(this.db, 'item/' + item.id);\n    if (item.img) {\n      console.log(\"if\");\n      this.deleteImg(item.img);\n    }\n    return from(deleteDoc(itemRef));\n  }\n  updateItem(item, id) {\n    const itemRef = doc(this.db, 'item/' + id);\n    return updateDoc(itemRef, {\n      ...item\n    });\n  }\n  createItemId() {\n    const newID = doc(collection(this.db, 'item')).id;\n    return newID;\n  }\n  uploadImg(path, file) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const storageRef = ref(_this.storage, path);\n      const task = uploadBytesResumable(storageRef, file);\n      yield task;\n      const url = yield getDownloadURL(storageRef);\n      return url;\n    })();\n  }\n  deleteImg(img) {\n    const storageRef = ref(this.storage, img);\n    const batch = writeBatch(this.db);\n    return deleteObject(storageRef).then(() => {\n      batch.commit();\n    });\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: Firestore\n  }, {\n    type: Storage\n  }, {\n    type: AuthService\n  }, {\n    type: SortItemsByDatePipe\n  }];\n};\nItemService = __decorate([Injectable({\n  providedIn: 'root'\n})], ItemService);\nexport { ItemService };","map":{"version":3,"names":["Injectable","Subject","from","map","collection","collectionData","deleteDoc","doc","docData","Firestore","query","setDoc","updateDoc","where","writeBatch","getDownloadURL","ref","uploadBytesResumable","Storage","deleteObject","AuthService","SortItemsByDatePipe","ItemService","constructor","db","storage","auth","sortItemsByDatePipe","items","ItemsUpdated","getItems","getUid","idField","getItemsnPut","subscribe","next","respons","error","console","log","getLastItems","pipe","transform","sortedItems","slice","getItem","id","addItems","item","itemRef","deleteItem","img","deleteImg","updateItem","createItemId","newID","uploadImg","path","file","_this","_asyncToGenerator","storageRef","task","url","batch","then","commit","_","__decorate","providedIn"],"sources":["C:\\Users\\HEYVA\\OneDrive - Thomas More\\Documenten\\School\\School jaar 2024 - 2025\\Web development\\Labo\\Eigen\\Project\\Wish-List-2.0\\wishlist\\src\\app\\item-component\\item.service.ts"],"sourcesContent":["/*Backend service*/\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, Subject, from, map } from 'rxjs';\r\nimport { item } from './item.model';\r\nimport { collection, collectionData, CollectionReference, deleteDoc, doc, docData, DocumentReference, Firestore, query, setDoc, updateDoc, where, writeBatch } from '@angular/fire/firestore';\r\nimport { getDownloadURL, ref, uploadBytesResumable, Storage, deleteObject } from '@angular/fire/storage';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { SortItemsByDatePipe } from '../sort-items-by-date.pipe';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ItemService {\r\n\r\n  items: item[] = [];\r\n  ItemsUpdated = new Subject<item[]>();\r\n\r\n\r\n\r\n  constructor(private db: Firestore, private storage : Storage, private auth: AuthService, private sortItemsByDatePipe: SortItemsByDatePipe) { }\r\n\r\n  getItems(): Observable<item[]> {\r\n    return collectionData<item>(\r\n    query(\r\n        collection(this.db, 'item') as CollectionReference<item>,\r\n        where(\"uid\", \"==\", this.auth.getUid())\r\n      ),\r\n      { idField: 'id' }\r\n    );\r\n  }\r\n\r\n  getItemsnPut(): void {\r\n    this.getItems().subscribe({\r\n      next: (respons: item[]) => {\r\n        this.items = respons;\r\n        this.ItemsUpdated.next(this.items);\r\n      },\r\n      error: (error) => console.log('error: ', error)\r\n    });\r\n  }\r\n\r\n  getLastItems(): Observable<item[]> {\r\n    return this.getItems().pipe(\r\n      map(items => this.sortItemsByDatePipe.transform(items)),\r\n      map(sortedItems => sortedItems.slice(0, 5))\r\n    );\r\n  }\r\n\r\n  getItem(id: string): Observable<item | undefined>{\r\n    return docData<item>(\r\n      doc(this.db, 'item/' + id) as DocumentReference<item>\r\n    );\r\n  }\r\n\r\n  addItems(item: item, id: string) {\r\n    const itemRef = doc(this.db, 'item/', id);\r\n    return from(setDoc(itemRef, item));\r\n  }\r\n\r\n  deleteItem(item: item) {\r\n    const itemRef = doc(this.db, 'item/' + item.id) as DocumentReference<item>;\r\n    if (item.img){\r\n      console.log(\"if\");\r\n      this.deleteImg(item.img);\r\n    }\r\n    return from(deleteDoc(itemRef));\r\n  }\r\n\r\n  \r\n  updateItem(item: item, id: string):Promise <void> {\r\n    const itemRef = doc(this.db, 'item/' + id) as DocumentReference<item>;\r\n    return updateDoc(itemRef, {... item});\r\n  }\r\n\r\n  createItemId(){\r\n    const newID = doc(collection(this.db, 'item')).id;\r\n    return newID;\r\n  }\r\n\r\n  async uploadImg(path: string, file: File): Promise<string> {\r\n    const storageRef = ref(this.storage, path);\r\n    const task = uploadBytesResumable(storageRef, file);\r\n    await task;\r\n    const url = await getDownloadURL(storageRef);\r\n    return url;\r\n\r\n  }\r\n\r\n  deleteImg(img: string) {\r\n    const storageRef = ref(this.storage, img);\r\n    const batch = writeBatch(this.db);\r\n    return deleteObject(storageRef).then(() => {\r\n      batch.commit();\r\n    })\r\n  }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}