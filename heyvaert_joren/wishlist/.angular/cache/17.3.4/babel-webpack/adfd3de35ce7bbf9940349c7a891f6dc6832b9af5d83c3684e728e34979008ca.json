{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵAppCheckInstances, ɵzoneWrap } from '@angular/fire';\nimport { from, timer } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { fromTask as fromTask$1, percentage as percentage$1 } from 'rxfire/storage';\nimport { connectStorageEmulator as connectStorageEmulator$1, deleteObject as deleteObject$1, getBlob as getBlob$1, getBytes as getBytes$1, getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, getStorage as getStorage$1, getStream as getStream$1, list as list$1, listAll as listAll$1, ref as ref$1, updateMetadata as updateMetadata$1, uploadBytes as uploadBytes$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nexport * from 'firebase/storage';\nclass Storage {\n  constructor(auth) {\n    return auth;\n  }\n}\nconst STORAGE_PROVIDER_NAME = 'storage';\nclass StorageInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME);\n  }\n}\nconst storageInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME))), distinct());\nconst PROVIDED_STORAGE_INSTANCES = new InjectionToken('angularfire2.storage-instances');\nfunction defaultStorageInstanceFactory(provided, defaultApp) {\n  const defaultStorage = ɵgetDefaultInstanceOf(STORAGE_PROVIDER_NAME, provided, defaultApp);\n  return defaultStorage && new Storage(defaultStorage);\n}\nfunction storageInstanceFactory(fn) {\n  return (zone, injector) => {\n    const storage = zone.runOutsideAngular(() => fn(injector));\n    return new Storage(storage);\n  };\n}\nconst STORAGE_INSTANCES_PROVIDER = {\n  provide: StorageInstances,\n  deps: [[new Optional(), PROVIDED_STORAGE_INSTANCES]]\n};\nconst DEFAULT_STORAGE_INSTANCE_PROVIDER = {\n  provide: Storage,\n  useFactory: defaultStorageInstanceFactory,\n  deps: [[new Optional(), PROVIDED_STORAGE_INSTANCES], FirebaseApp]\n};\nclass StorageModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'gcs');\n  }\n  static ɵfac = function StorageModule_Factory(t) {\n    return new (t || StorageModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StorageModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_STORAGE_INSTANCE_PROVIDER, STORAGE_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StorageModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_STORAGE_INSTANCE_PROVIDER, STORAGE_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideStorage(fn, ...deps) {\n  return {\n    ngModule: StorageModule,\n    providers: [{\n      provide: PROVIDED_STORAGE_INSTANCES,\n      useFactory: storageInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps,\n      // Defensively load Auth first, if provided\n      [new Optional(), AuthInstances], [new Optional(), ɵAppCheckInstances], ...deps]\n    }]\n  };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst fromTask = ɵzoneWrap(fromTask$1, true);\nconst percentage = ɵzoneWrap(percentage$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst connectStorageEmulator = ɵzoneWrap(connectStorageEmulator$1, true);\nconst deleteObject = ɵzoneWrap(deleteObject$1, true);\nconst getBlob = ɵzoneWrap(getBlob$1, true);\nconst getBytes = ɵzoneWrap(getBytes$1, true);\nconst getDownloadURL = ɵzoneWrap(getDownloadURL$1, true);\nconst getMetadata = ɵzoneWrap(getMetadata$1, true);\nconst getStorage = ɵzoneWrap(getStorage$1, true);\nconst getStream = ɵzoneWrap(getStream$1, true);\nconst list = ɵzoneWrap(list$1, true);\nconst listAll = ɵzoneWrap(listAll$1, true);\nconst ref = ɵzoneWrap(ref$1, true);\nconst updateMetadata = ɵzoneWrap(updateMetadata$1, true);\nconst uploadBytes = ɵzoneWrap(uploadBytes$1, true);\nconst uploadBytesResumable = ɵzoneWrap(uploadBytesResumable$1, true);\nconst uploadString = ɵzoneWrap(uploadString$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Storage, StorageInstances, StorageModule, connectStorageEmulator, deleteObject, fromTask, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, percentage, provideStorage, ref, storageInstance$, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"names":["ɵgetAllInstancesOf","ɵgetDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","ɵAppCheckInstances","ɵzoneWrap","from","timer","concatMap","distinct","i0","InjectionToken","Optional","NgModule","NgZone","Injector","FirebaseApp","FirebaseApps","AuthInstances","registerVersion","fromTask","fromTask$1","percentage","percentage$1","connectStorageEmulator","connectStorageEmulator$1","deleteObject","deleteObject$1","getBlob","getBlob$1","getBytes","getBytes$1","getDownloadURL","getDownloadURL$1","getMetadata","getMetadata$1","getStorage","getStorage$1","getStream","getStream$1","list","list$1","listAll","listAll$1","ref","ref$1","updateMetadata","updateMetadata$1","uploadBytes","uploadBytes$1","uploadBytesResumable","uploadBytesResumable$1","uploadString","uploadString$1","Storage","constructor","auth","STORAGE_PROVIDER_NAME","StorageInstances","storageInstance$","pipe","PROVIDED_STORAGE_INSTANCES","defaultStorageInstanceFactory","provided","defaultApp","defaultStorage","storageInstanceFactory","fn","zone","injector","storage","runOutsideAngular","STORAGE_INSTANCES_PROVIDER","provide","deps","DEFAULT_STORAGE_INSTANCE_PROVIDER","useFactory","StorageModule","full","ɵfac","StorageModule_Factory","t","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","providers","ngDevMode","ɵsetClassMetadata","args","provideStorage","ngModule","multi"],"sources":["C:/Users/HEYVA/OneDrive - Thomas More/Documenten/School/School jaar 2024 - 2025/Web development/Labo/Eigen/Project/Wish-List-2.0/wishlist/node_modules/@angular/fire/fesm2022/angular-fire-storage.mjs"],"sourcesContent":["import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵAppCheckInstances, ɵzoneWrap } from '@angular/fire';\nimport { from, timer } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { fromTask as fromTask$1, percentage as percentage$1 } from 'rxfire/storage';\nimport { connectStorageEmulator as connectStorageEmulator$1, deleteObject as deleteObject$1, getBlob as getBlob$1, getBytes as getBytes$1, getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, getStorage as getStorage$1, getStream as getStream$1, list as list$1, listAll as listAll$1, ref as ref$1, updateMetadata as updateMetadata$1, uploadBytes as uploadBytes$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nexport * from 'firebase/storage';\n\nclass Storage {\n    constructor(auth) {\n        return auth;\n    }\n}\nconst STORAGE_PROVIDER_NAME = 'storage';\nclass StorageInstances {\n    constructor() {\n        return ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME);\n    }\n}\nconst storageInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_STORAGE_INSTANCES = new InjectionToken('angularfire2.storage-instances');\nfunction defaultStorageInstanceFactory(provided, defaultApp) {\n    const defaultStorage = ɵgetDefaultInstanceOf(STORAGE_PROVIDER_NAME, provided, defaultApp);\n    return defaultStorage && new Storage(defaultStorage);\n}\nfunction storageInstanceFactory(fn) {\n    return (zone, injector) => {\n        const storage = zone.runOutsideAngular(() => fn(injector));\n        return new Storage(storage);\n    };\n}\nconst STORAGE_INSTANCES_PROVIDER = {\n    provide: StorageInstances,\n    deps: [\n        [new Optional(), PROVIDED_STORAGE_INSTANCES],\n    ]\n};\nconst DEFAULT_STORAGE_INSTANCE_PROVIDER = {\n    provide: Storage,\n    useFactory: defaultStorageInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_STORAGE_INSTANCES],\n        FirebaseApp,\n    ]\n};\nclass StorageModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'gcs');\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.6\", ngImport: i0, type: StorageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.6\", ngImport: i0, type: StorageModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.6\", ngImport: i0, type: StorageModule, providers: [\n            DEFAULT_STORAGE_INSTANCE_PROVIDER,\n            STORAGE_INSTANCES_PROVIDER,\n        ] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.6\", ngImport: i0, type: StorageModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_STORAGE_INSTANCE_PROVIDER,\n                        STORAGE_INSTANCES_PROVIDER,\n                    ]\n                }]\n        }], ctorParameters: () => [] });\nfunction provideStorage(fn, ...deps) {\n    return {\n        ngModule: StorageModule,\n        providers: [{\n                provide: PROVIDED_STORAGE_INSTANCES,\n                useFactory: storageInstanceFactory(fn),\n                multi: true,\n                deps: [\n                    NgZone,\n                    Injector,\n                    ɵAngularFireSchedulers,\n                    FirebaseApps,\n                    // Defensively load Auth first, if provided\n                    [new Optional(), AuthInstances],\n                    [new Optional(), ɵAppCheckInstances],\n                    ...deps,\n                ]\n            }]\n    };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst fromTask = ɵzoneWrap(fromTask$1, true);\nconst percentage = ɵzoneWrap(percentage$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst connectStorageEmulator = ɵzoneWrap(connectStorageEmulator$1, true);\nconst deleteObject = ɵzoneWrap(deleteObject$1, true);\nconst getBlob = ɵzoneWrap(getBlob$1, true);\nconst getBytes = ɵzoneWrap(getBytes$1, true);\nconst getDownloadURL = ɵzoneWrap(getDownloadURL$1, true);\nconst getMetadata = ɵzoneWrap(getMetadata$1, true);\nconst getStorage = ɵzoneWrap(getStorage$1, true);\nconst getStream = ɵzoneWrap(getStream$1, true);\nconst list = ɵzoneWrap(list$1, true);\nconst listAll = ɵzoneWrap(listAll$1, true);\nconst ref = ɵzoneWrap(ref$1, true);\nconst updateMetadata = ɵzoneWrap(updateMetadata$1, true);\nconst uploadBytes = ɵzoneWrap(uploadBytes$1, true);\nconst uploadBytesResumable = ɵzoneWrap(uploadBytesResumable$1, true);\nconst uploadString = ɵzoneWrap(uploadString$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Storage, StorageInstances, StorageModule, connectStorageEmulator, deleteObject, fromTask, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, percentage, provideStorage, ref, storageInstance$, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}