{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { collection, collectionData, deleteDoc, doc, docData, Firestore, setDoc } from '@angular/fire/firestore';\nimport { from, Subject } from 'rxjs';\nlet BackendAdminService = class BackendAdminService {\n  constructor(db) {\n    this.db = db;\n    this.users = [];\n    this.admins = [];\n    this.IsAdmin = new Subject();\n  }\n  getAllUsers() {\n    return collectionData(collection(this.db, 'user'), {\n      idField: 'id'\n    });\n  }\n  getAllUsersPut() {\n    this.getAllUsers().subscribe({\n      next: respons => {\n        this.users = respons;\n      },\n      error: error => console.log('error: ', error)\n    });\n  }\n  getAllAdmins() {\n    return collectionData(collection(this.db, 'admin'), {\n      idField: 'id'\n    });\n  }\n  getAllAdminsPutAssignRoles() {\n    this.getAllAdmins().subscribe({\n      next: respons => {\n        this.admins = respons;\n        this.assignRoles();\n      },\n      error: error => console.log('error: ', error)\n    });\n  }\n  assignRoles() {\n    this.users.forEach(user => {\n      for (const admin of this.admins) {\n        if (user.id == admin.id) {\n          user.role = \"Admin\";\n          break;\n        } else {\n          user.role = \"User\";\n        }\n      }\n    });\n  }\n  addAdmin(user) {\n    const adminRef = doc(this.db, '/admin', user.id);\n    return from(setDoc(adminRef, {\n      email: user.email\n    }));\n  }\n  deleteAdmin(admin) {\n    const adminRef = doc(this.db, '/admin', admin.id);\n    return from(deleteDoc(adminRef));\n  }\n  getAdmin(uid) {\n    return docData(doc(this.db, '/admin/' + uid));\n  }\n  checkAdmin(bool) {\n    this.IsAdmin.next(bool);\n    if (bool == true) {\n      // JSON.stringify(true) is om een object om te zetten naar een string\n      localStorage.setItem('isAdmin', JSON.stringify(true));\n    } else {\n      localStorage.removeItem('isAdmin');\n    }\n  }\n  getStoredAdminStatus() {\n    const storedAdminStatus = localStorage.getItem('isAdmin');\n    if (storedAdminStatus === 'true') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: Firestore\n  }];\n};\nBackendAdminService = __decorate([Injectable({\n  providedIn: 'root'\n})], BackendAdminService);\nexport { BackendAdminService };","map":{"version":3,"names":["Injectable","collection","collectionData","deleteDoc","doc","docData","Firestore","setDoc","from","Subject","BackendAdminService","constructor","db","users","admins","IsAdmin","getAllUsers","idField","getAllUsersPut","subscribe","next","respons","error","console","log","getAllAdmins","getAllAdminsPutAssignRoles","assignRoles","forEach","user","admin","id","role","addAdmin","adminRef","email","deleteAdmin","getAdmin","uid","checkAdmin","bool","localStorage","setItem","JSON","stringify","removeItem","getStoredAdminStatus","storedAdminStatus","getItem","_","__decorate","providedIn"],"sources":["C:\\Users\\HEYVA\\OneDrive - Thomas More\\Documenten\\School\\School jaar 2024 - 2025\\Web development\\Labo\\Eigen\\Project\\Wish-List-2.0\\wishlist\\src\\app\\auth\\admin\\backend-admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { collection, collectionData, CollectionReference, deleteDoc, doc, docData, DocumentReference, Firestore, setDoc } from '@angular/fire/firestore';\r\nimport { from, Observable, Subject } from 'rxjs';\r\nimport { user } from '../user/user.module';\r\nimport { admin } from './admin/admin.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BackendAdminService {\r\n\r\n  users: user[] = [];\r\n  admins: admin[] = [];\r\n\r\n  IsAdmin = new Subject<boolean>();\r\n\r\n  constructor(private db: Firestore) { }\r\n\r\n  getAllUsers(): Observable<user[]>\r\n  {\r\n    return collectionData<user>(\r\n      collection(this.db, 'user') as CollectionReference<user>,\r\n      { idField: 'id'}\r\n    )\r\n  }\r\n\r\n  getAllUsersPut(): void {\r\n    this.getAllUsers().subscribe({\r\n      next: (respons: user[]) => {\r\n        this.users = respons;\r\n      },\r\n      error: (error) => console.log('error: ', error)\r\n    });\r\n  }\r\n\r\n  getAllAdmins(): Observable <admin[]>\r\n  {\r\n    return collectionData<admin>(\r\n      collection(this.db, 'admin') as CollectionReference<admin>,\r\n      { idField: 'id'}\r\n    )\r\n  }\r\n\r\n  getAllAdminsPutAssignRoles(): void {\r\n    this.getAllAdmins().subscribe({\r\n      next: (respons: admin[]) => {\r\n        this.admins = respons;\r\n        this.assignRoles();\r\n\r\n      },\r\n      error: (error) => console.log('error: ', error)\r\n    });\r\n  }\r\n\r\n  assignRoles()\r\n  {\r\n    this.users.forEach(user => {\r\n\r\n      for(const admin of this.admins)\r\n      {\r\n        if (user.id == admin.id)\r\n        {\r\n          user.role = \"Admin\";\r\n          break;\r\n        }\r\n        else{\r\n          user.role = \"User\";\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  addAdmin(user: user)\r\n  {\r\n    const adminRef = doc(this.db, '/admin', user.id!)\r\n    return from(setDoc(adminRef, {email: user.email} ))\r\n  }\r\n\r\n  deleteAdmin(admin: admin)\r\n  {\r\n    const adminRef = doc(this.db, '/admin', admin.id)\r\n    return from(deleteDoc(adminRef));\r\n  }\r\n\r\n  getAdmin(uid: string | null)\r\n  {\r\n    return docData<admin>(\r\n      doc(this.db, '/admin/' + uid) as DocumentReference<admin>\r\n    )\r\n  }\r\n\r\n  checkAdmin(bool: boolean)\r\n  {\r\n    this.IsAdmin.next(bool);\r\n    if(bool == true)\r\n    {\r\n      // JSON.stringify(true) is om een object om te zetten naar een string\r\n      localStorage.setItem('isAdmin', JSON.stringify(true) );\r\n    }\r\n    else\r\n    {\r\n      localStorage.removeItem('isAdmin');\r\n      \r\n    }\r\n  }\r\n\r\n  getStoredAdminStatus(): boolean\r\n  {\r\n    const storedAdminStatus = localStorage.getItem('isAdmin');\r\n    if(storedAdminStatus === 'true')\r\n    {\r\n    return true;\r\n    }\r\n    else\r\n    {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}