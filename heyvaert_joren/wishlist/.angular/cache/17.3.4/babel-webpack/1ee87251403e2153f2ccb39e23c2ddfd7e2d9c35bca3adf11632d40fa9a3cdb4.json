{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/HEYVA/OneDrive - Thomas More/Documenten/School/School jaar 2024 - 2025/Web development/Labo/Eigen/Project/Wish-List-2.0/wishlist/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { LoginComponent } from './login.component';\nimport { FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\nimport { BackendAdminService } from '../admin/backend-admin.service';\nimport { Auth } from '@angular/fire/auth';\nimport { Firestore } from '@angular/fire/firestore';\nimport { By } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\ndescribe('LoginComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const mockAuth = {}; // Mock object voor Auth\n    const mockFirestore = {}; // Mock object voor Firestore\n    yield TestBed.configureTestingModule({\n      imports: [LoginComponent, ReactiveFormsModule, CommonModule],\n      providers: [FormBuilder, AuthService, {\n        provide: Router,\n        useValue: {}\n      },\n      // simuleren\n      BackendAdminService, {\n        provide: Auth,\n        useValue: mockAuth\n      },\n      // simuleren\n      {\n        provide: Firestore,\n        useValue: mockFirestore\n      } // simuleren\n      ]\n    }).compileComponents();\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    component.ngOnInit();\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('email should not be empty', () => {\n    let emailerr;\n    const email = component.form.get('credentials.email');\n    email?.setValue('');\n    expect(email?.status).toEqual(\"INVALID\");\n    expect(email?.hasError('required')).toBeTrue();\n    fixture.detectChanges();\n    fixture.whenStable().then(() => {\n      emailerr = fixture.debugElement.query(By.css('.credentials span')).nativeElement;\n      expect(emailerr.textContent).toContain('Wachtwoord of email onjuist');\n    });\n  });\n  it('email should be type of email', () => {\n    let emailerr;\n    const email = component.form.get('credentials.email');\n    email?.setValue('test');\n    expect(email?.status).toEqual(\"INVALID\");\n    expect(email?.hasError('email')).toBeTrue();\n    fixture.detectChanges();\n    fixture.whenStable().then(() => {\n      emailerr = fixture.debugElement.query(By.css('.credentials span')).nativeElement;\n      expect(emailerr.textContent).toContain('Wachtwoord of email onjuist');\n    });\n  });\n  it('email is correct', () => {\n    let emailerr;\n    const email = component.form.get('credentials.email');\n    email?.setValue('test@test.com');\n    expect(email?.status).toEqual(\"VALID\");\n    expect(email?.hasError('required')).toBeFalse();\n    expect(email?.hasError('email')).toBeFalse();\n    fixture.detectChanges();\n    fixture.whenStable().then(() => {\n      emailerr = fixture.debugElement.query(By.css('.credentials span')).nativeElement;\n      expect(emailerr).toBeNull;\n    });\n  });\n  it('passwd is invalid', () => {\n    let passwderr;\n    const passwd = component.form.get('credentials.passwd');\n    passwd?.setValue('12345678');\n    expect(passwd?.status).toEqual(\"INVALID\");\n    expect(passwd?.hasError('passwordStrength')).toBeTrue();\n    expect(passwd?.hasError('required')).toBeFalse();\n    expect(passwd?.hasError('minLength')).toBeFalse();\n    fixture.detectChanges();\n    fixture.whenStable().then(() => {\n      passwderr = fixture.debugElement.query(By.css('.credentials span')).nativeElement;\n      expect(passwderr.textContent).toContain('Wachtwoord of email onjuist');\n    });\n  });\n  it('passwd is valid: Test123*', () => {\n    let passwderr;\n    const passwd = component.form.get('credentials.passwd');\n    passwd?.setValue('Test123*');\n    expect(passwd?.status).toEqual(\"VALID\");\n    expect(passwd?.hasError('passwordStrength')).toBeFalse();\n    expect(passwd?.hasError('required')).toBeFalse();\n    expect(passwd?.hasError('minLength')).toBeFalse();\n    fixture.detectChanges();\n    fixture.whenStable().then(() => {\n      passwderr = fixture.debugElement.query(By.css('.credentials span')).nativeElement;\n      expect(passwderr).toBeNull;\n    });\n  });\n  it('passwd is valid: TESTtest12345*&_', () => {\n    let passwderr;\n    const passwd = component.form.get('credentials.passwd');\n    passwd?.setValue('TESTtest12345*&_');\n    expect(passwd?.status).toEqual(\"VALID\");\n    expect(passwd?.hasError('passwordStrength')).toBeFalse();\n    expect(passwd?.hasError('required')).toBeFalse();\n    expect(passwd?.hasError('minLength')).toBeFalse();\n    fixture.detectChanges();\n    fixture.whenStable().then(() => {\n      passwderr = fixture.debugElement.query(By.css('.credentials span')).nativeElement;\n      expect(passwderr).toBeNull;\n    });\n  });\n});","map":{"version":3,"names":["TestBed","LoginComponent","FormBuilder","ReactiveFormsModule","AuthService","Router","BackendAdminService","Auth","Firestore","By","CommonModule","describe","component","fixture","beforeEach","_asyncToGenerator","mockAuth","mockFirestore","configureTestingModule","imports","providers","provide","useValue","compileComponents","createComponent","componentInstance","ngOnInit","it","expect","toBeTruthy","emailerr","email","form","get","setValue","status","toEqual","hasError","toBeTrue","detectChanges","whenStable","then","debugElement","query","css","nativeElement","textContent","toContain","toBeFalse","toBeNull","passwderr","passwd"],"sources":["C:\\Users\\HEYVA\\OneDrive - Thomas More\\Documenten\\School\\School jaar 2024 - 2025\\Web development\\Labo\\Eigen\\Project\\Wish-List-2.0\\wishlist\\src\\app\\auth\\login\\login.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { LoginComponent } from './login.component';\r\nimport { FormBuilder, ReactiveFormsModule } from '@angular/forms';\r\nimport { AuthService } from '../auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { BackendAdminService } from '../admin/backend-admin.service';\r\nimport { Auth } from '@angular/fire/auth';\r\nimport { Firestore } from '@angular/fire/firestore';\r\nimport { By } from '@angular/platform-browser';\r\nimport { CommonModule } from '@angular/common';\r\n\r\ndescribe('LoginComponent', () => {\r\n  let component: LoginComponent;\r\n  let fixture: ComponentFixture<LoginComponent>;\r\n\r\n  beforeEach(async () => {\r\n    const mockAuth = {}; // Mock object voor Auth\r\n    const mockFirestore = {}; // Mock object voor Firestore\r\n\r\n    await TestBed.configureTestingModule({\r\n      imports: [LoginComponent, ReactiveFormsModule, CommonModule],\r\n      providers: [\r\n        FormBuilder,\r\n        AuthService,\r\n        { provide: Router, useValue: {} }, // simuleren\r\n        BackendAdminService,\r\n        { provide: Auth, useValue: mockAuth }, // simuleren\r\n        { provide: Firestore, useValue: mockFirestore } // simuleren\r\n      ]\r\n    })\r\n    .compileComponents();\r\n    \r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance;\r\n\r\n    component.ngOnInit();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('email should not be empty', () => {\r\n    let emailerr;\r\n    const email = component.form.get('credentials.email');\r\n\r\n    email?.setValue('');\r\n    expect(email?.status).toEqual(\"INVALID\");\r\n    expect(email?.hasError('required')).toBeTrue();\r\n\r\n    fixture.detectChanges();\r\n\r\n    fixture.whenStable().then(() => {\r\n      emailerr = fixture.debugElement.query(By.css('.credentials span')).nativeElement;\r\n      expect(emailerr.textContent).toContain('Wachtwoord of email onjuist');\r\n    })\r\n  });\r\n\r\n  it('email should be type of email', () => {\r\n    let emailerr;\r\n    const email = component.form.get('credentials.email');\r\n\r\n    email?.setValue('test');\r\n    expect(email?.status).toEqual(\"INVALID\");\r\n    expect(email?.hasError('email')).toBeTrue();\r\n\r\n    fixture.detectChanges();\r\n\r\n    fixture.whenStable().then(() => {\r\n      emailerr = fixture.debugElement.query(By.css('.credentials span')).nativeElement;\r\n      expect(emailerr.textContent).toContain('Wachtwoord of email onjuist');\r\n    })\r\n  });\r\n\r\n  it('email is correct', () => {\r\n    let emailerr;\r\n    const email = component.form.get('credentials.email');\r\n\r\n    email?.setValue('test@test.com');\r\n    expect(email?.status).toEqual(\"VALID\");\r\n    expect(email?.hasError('required')).toBeFalse();\r\n    expect(email?.hasError('email')).toBeFalse();\r\n\r\n\r\n    fixture.detectChanges();\r\n\r\n    fixture.whenStable().then(() => {\r\n      emailerr = fixture.debugElement.query(By.css('.credentials span')).nativeElement;\r\n      expect(emailerr).toBeNull;\r\n    })\r\n  });\r\n\r\n  it('passwd is invalid', () => {\r\n    let passwderr;\r\n    const passwd = component.form.get('credentials.passwd');\r\n\r\n    passwd?.setValue('12345678');\r\n    expect(passwd?.status).toEqual(\"INVALID\");\r\n    expect(passwd?.hasError('passwordStrength')).toBeTrue();\r\n    expect(passwd?.hasError('required')).toBeFalse();\r\n    expect(passwd?.hasError('minLength')).toBeFalse();\r\n\r\n    fixture.detectChanges();\r\n\r\n    fixture.whenStable().then(() => {\r\n      passwderr = fixture.debugElement.query(By.css('.credentials span')).nativeElement;\r\n      expect(passwderr.textContent).toContain('Wachtwoord of email onjuist');\r\n    })\r\n  });\r\n\r\n\r\n  it('passwd is valid: Test123*', () => {\r\n    let passwderr;\r\n    const passwd = component.form.get('credentials.passwd');\r\n\r\n    passwd?.setValue('Test123*');\r\n    expect(passwd?.status).toEqual(\"VALID\");\r\n    expect(passwd?.hasError('passwordStrength')).toBeFalse();\r\n    expect(passwd?.hasError('required')).toBeFalse();\r\n    expect(passwd?.hasError('minLength')).toBeFalse();\r\n\r\n\r\n    fixture.detectChanges();\r\n\r\n    fixture.whenStable().then(() => {\r\n      passwderr = fixture.debugElement.query(By.css('.credentials span')).nativeElement;\r\n      expect(passwderr).toBeNull;\r\n    })\r\n  });\r\n\r\n  it('passwd is valid: TESTtest12345*&_', () => {\r\n    let passwderr;\r\n    const passwd = component.form.get('credentials.passwd');\r\n\r\n    passwd?.setValue('TESTtest12345*&_');\r\n    expect(passwd?.status).toEqual(\"VALID\");\r\n    expect(passwd?.hasError('passwordStrength')).toBeFalse();\r\n    expect(passwd?.hasError('required')).toBeFalse();\r\n    expect(passwd?.hasError('minLength')).toBeFalse();\r\n\r\n\r\n    fixture.detectChanges();\r\n\r\n    fixture.whenStable().then(() => {\r\n      passwderr = fixture.debugElement.query(By.css('.credentials span')).nativeElement;\r\n      expect(passwderr).toBeNull;\r\n    })\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}